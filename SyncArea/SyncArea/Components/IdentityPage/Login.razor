@page "/login"
@using SyncArea.Identity.Models
@inject SignInManager<ApplicationUser> SignInManager
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
<div class="d-flex flex-column align-center justify-center gap-2" style="height:80vh">
    <MudContainer MaxWidth="MaxWidth.Small">
        <EditForm Model="@Model" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
        <MudCard Outlined >
            <MudCardHeader>
                <MudText Typo="Typo.h5">登录页面</MudText>
            </MudCardHeader>
            <MudCardContent>
                    <MudTextField Variant="Variant.Outlined" Label="用户名" @bind-Value="Model.Username" For="@(() => Model.Username)" />
                    <MudTextField Variant="Variant.Outlined" Label="密码" @bind-Value="Model.Password" InputType="InputType.Password" For="@(() => Model.Password)" />
            </MudCardContent>
            <MudCardActions>
                <MudButton  ButtonType="ButtonType.Submit" Variant="Variant.Outlined" Color="Color.Primary" Class="ml-auto">登录</MudButton>
            </MudCardActions>
        </MudCard>
        </EditForm>
    </MudContainer>
</div>

@code {
    private LoginModel Model { get; set; } = new();

    public class LoginModel
    {
        [Required]
        public string Username { get; set; } = string.Empty;
        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = string.Empty;
    }

    private async Task HandleLogin()
    {
        var result = await SignInManager.PasswordSignInAsync(Model.Username, Model.Password, isPersistent: true, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Snackbar.Add("登陆成功!", Severity.Success);
            Navigation.NavigateTo("/"); // 登录成功跳转到首页
        }
        else
        {
            Snackbar.Add("登陆失败!", Severity.Error);
        }
    }
}