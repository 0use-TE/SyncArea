@page "/workspace/{WorkspaceId:guid}"
@using Microsoft.AspNetCore.Authorization
@using SyncArea.Identity.Models
@using SyncArea.Misc
@using SyncArea.Services
@attribute [Authorize(Policy = "WorkspaceMember")]
@inject WorkItemService WorkItemService
@inject WorkspaceService WorkspaceService
@inject IDialogService DialogService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
<MudCard Elevation="0">
    <MudCardHeader Class="d-flex flex-column">
        <MudText Typo="Typo.h5" Color="Color.Primary" Align="Align.Left">工作区名称: @Workspace?.Name</MudText>
        <br />
        <MudSpacer />
        <div class="d-flex ml-auto">
            <MudButton Variant="Variant.Outlined" Color="Color.Error" Href="/">首页</MudButton>
            <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="ShowCreateWorkItemDialog" Class="mr-1">添加</MudButton>
        </div>
    </MudCardHeader>
    <MudCardContent>
            @if (IsLoading)
            {
                <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
            }
            else if (GroupedWorkItems.Any())
            {
                <DisplayWorkItem GroupedWorkItems="GroupedWorkItems"></DisplayWorkItem>
            }
            else
            {
                <MudText>暂无工作项</MudText>
            }
    </MudCardContent>
</MudCard>


@code {
    [Parameter] public Guid WorkspaceId { get; set; }
    private WorkspaceDto? Workspace { get; set; }
    private List<WorkItemDto> WorkItems { get; set; } = new();
    private IEnumerable<IGrouping<DateTime, WorkItemDto>> GroupedWorkItems => WorkItems.GroupBy(wi => wi.Date.Date);
    private bool IsLoading { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        Workspace = (await WorkspaceService.GetWorkspacesAsync()).FirstOrDefault(w => w.Id == WorkspaceId);
        if (Workspace == null)
        {
            Navigation.NavigateTo("/workspaces");
            return;
        }
        WorkItems = await WorkItemService.GetWorkItemsByWorkspaceAsync(WorkspaceId);
        IsLoading = false;
    }
    protected override async Task OnParametersSetAsync()
    {
    }
    private async Task ShowCreateWorkItemDialog()
    {
        var parameters = new DialogParameters
        {
            { "WorkspaceId", WorkspaceId },
            { "OnWorkItemCreated", EventCallback.Factory.Create<WorkItemDto>(this, async (WorkItemDto newWorkItem) =>
            {
                WorkItems.Add(newWorkItem); // 直接添加新工作项
               await InvokeAsync(StateHasChanged); 
        await JSRuntime.InvokeVoidAsync("initLazyLoad"); // 每次参数更新重新触发

            }) }
        };
        await DialogService.ShowAsync<CreateWorkItemDialog>("添加工作项", parameters, AppliationSettings.DialogOptions);
    }
}