@inject UserService UserService
@inherits MudComponentBase
@inject IDialogService DialogService
<MudCard Outlined Class="pa-4 ma-4">
    <MudCardHeader>
        <MudText Typo="Typo.h6">用户的工作区</MudText>
    </MudCardHeader>
    <MudCardContent>
        <MudDataGrid T="WorkspaceDto" Items="@Workspaces" MultiSelection="false">
            <Columns>
                <PropertyColumn Title="名称" Property="x => x.Name" />
                <PropertyColumn Title="房间号" Property="x => x.RoomNumber" />
                <PropertyColumn Title="创建时间" Property="x => x.CreatedAt" />
                @* 一个删除按钮 *@
                <TemplateColumn>
                    <CellTemplate>
                        <MudButton Color="Color.Error" Variant="Variant.Outlined" OnClick="@(()=>DeleteWorkSpace(context.Item))">删除</MudButton>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
        </MudDataGrid>
    </MudCardContent>
    <MudCardActions Class="d-flex flex-column gap-1">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Cancel" Class="ml-auto">关闭</MudButton>
    </MudCardActions>
</MudCard>


@code {
    [CascadingParameter] IMudDialogInstance MudDialog { get; set; } = null!;
    [Parameter] public string UserId { get; set; } = string.Empty;

    private List<WorkspaceDto> Workspaces { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        Workspaces = await UserService.GetUserWorkspacesAsync(UserId);
    }

    private async Task DeleteWorkSpace(WorkspaceDto workspaceDto)
    {
        var result = await DialogService.ShowMessageBox(UserId, $"确定要删除工作区 {workspaceDto.Name} 吗？","删除", "取消");
        if (result.HasValue && !result.Value)
            return;
        await UserService.RemoveUserFromWorkSpace(workspaceDto, UserId);
        Workspaces = await UserService.GetUserWorkspacesAsync(UserId);
        await InvokeAsync(StateHasChanged);
    }
    private void Cancel()
    {
        MudDialog.Cancel();
    }
}