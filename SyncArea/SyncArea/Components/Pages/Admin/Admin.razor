@page "/admin"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Options
@using SyncArea.Components.Pages.Admin.Dialog
@using SyncArea.Misc
@using SyncArea.Models.Options
@using System.IO.Compression
@attribute [Authorize(Roles = "Admin,SuperAdmin")]
@inject UserService UserService
@inject WorkspaceService WorkspaceService
@inject IDialogService DialogService
@inject ShareService ShareService
@inject BlazorDownloadFile.IBlazorDownloadFileService BlazorDownloadFileService
@inject UserCRUDService  UserCRUDService
@inject ISnackbar Snackbar
@inject IOptions<ImagesPathModel> ImagePathOptions

<MudGrid>
    <MudItem xs="12">
        <MudCard Outlined>
            <MudCardHeader>
                <MudText Typo="Typo.h5">用户</MudText>
                <MudSpacer />
                @if(UserCRUDService.IsSuperAdmin)
                {
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ShowCreateUserDialog">创建用户</MudButton>
                }
            </MudCardHeader>
            <MudCardContent>
                <MudDataGrid @ref="UserGrid" ServerData="LoadUsers" T="UserDto" MultiSelection="false" Style="max-height:60vh;overflow:auto" FixedFooter FixedHeader>
                    <Columns>
                        <PropertyColumn Title="账号" Property="x=>x.Username"></PropertyColumn>
                        <PropertyColumn Title="姓名" Property="x=>x.Name"></PropertyColumn>
                        <PropertyColumn Title="角色" Property="x=>x.Role"></PropertyColumn>
                        <TemplateColumn Title="操作">
                            <CellTemplate>
                                @if(UserCRUDService.IsSuperAdmin)
                                {
                                    <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="() => ShowEditUserDialog(context.Item)">修改</MudButton>
                                }
                                <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="() => ShowAddToWorkspaceDialog(context.Item)">添加到工作区</MudButton>
                                <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="() => ShowViewWorkspacesDialog(context.Item)">查看工作区</MudButton>
                                @if(UserCRUDService.IsSuperAdmin)
                                {
                                    <MudButton Variant="Variant.Text" Color="Color.Error" OnClick="() => DeleteUser(context.Item.Id)">删除</MudButton>
                                }
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>
                    <PagerContent>
                        <MudDataGridPager  PageSizeOptions="[100,500,1000,2000,10000]"/>
                    </PagerContent>
                </MudDataGrid>
            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem xs="12">
        <MudCard Outlined>
            <MudCardHeader>
                <MudText Typo="Typo.h5">工作区</MudText>
                <MudSpacer />
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="ShowCreateWorkspaceDialog">创建工作区</MudButton>
            </MudCardHeader>
            <MudCardContent>
                <MudDataGrid @ref="WorkspaceGrid" ServerData="LoadWorkspaces" T="WorkspaceDto" MultiSelection="false"  FixedFooter Style="max-height:60vh;overflow:auto" FixedHeader>
                    <Columns>

                        <PropertyColumn Title="项目名" Property="x=>x.Name"></PropertyColumn>
                        <PropertyColumn Title="项目号" Property="x=>x.RoomNumber"></PropertyColumn>
                        <PropertyColumn Title="创建时间" Property="x=>x.CreatedAt"></PropertyColumn>
                        <PropertyColumn Title="密码" Property="x=>x.Password"></PropertyColumn>
                        <TemplateColumn Title="操作">
                            <CellTemplate>
                                <MudButton Variant="Variant.Text" Color="Color.Primary"  Href=@($"/workspace/{context.Item.Id}")>前往</MudButton>
                                <MudButton Variant="Variant.Text" Color="Color.Secondary" OnClick="() => ShowEditWorkspaceDialog(context.Item)">编辑</MudButton>
                                <MudButton Variant="Variant.Text" Color="Color.Info" OnClick="() => ImportToPack(context.Item)">导出</MudButton>
                                @if(UserCRUDService.IsSuperAdmin)
                                {
                                    <MudButton Variant="Variant.Text" Color="Color.Error" OnClick="() => DeleteWorkspace(context.Item.Id)">删除</MudButton>
                                }
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>
                    <PagerContent>
                        <MudDataGridPager PageSizeOptions="[100,500,1000,2000,10000]" />
                    </PagerContent>
                </MudDataGrid>
            </MudCardContent>
        </MudCard>
    </MudItem>
</MudGrid>

@code {
    private MudDataGrid<UserDto> UserGrid = null!;
    private MudDataGrid<WorkspaceDto> WorkspaceGrid = null!;


    private async Task<GridData<UserDto>> LoadUsers(GridState<UserDto> state)
    {
        var users = await UserService.GetUsersAsync(state.Page + 1, state.PageSize);
        return new GridData<UserDto>
        {
            Items = users,
            TotalItems = (await UserService.GetUsersAsync()).Count
        };
    }
    private async Task ShowEditUserDialog(UserDto user)
    {
        var parameters = new DialogParameters
        {
            { "User", user },
            { "OnUserUpdated", EventCallback.Factory.Create<string>(this, async () => await UserGrid.ReloadServerData()) }
        };
        await DialogService.ShowAsync<EditUserDialog>("编辑用户", parameters, AppliationSettings.DialogOptions);
    }
    private async Task<GridData<WorkspaceDto>> LoadWorkspaces(GridState<WorkspaceDto> state)
    {
        var workspaces = await WorkspaceService.GetWorkspacesAsync(state.Page + 1, state.PageSize);
        return new GridData<WorkspaceDto>
        {
            Items = workspaces,
            TotalItems = (await WorkspaceService.GetWorkspacesAsync()).Count
        };
    }

    private async Task ShowCreateUserDialog()
    {
        var parameters = new DialogParameters
        {
            { "OnUserCreated", EventCallback.Factory.Create<string>(this, async () => await UserGrid.ReloadServerData()) }
        };
        await DialogService.ShowAsync<CreateUserDialog>("Create User", parameters, AppliationSettings.DialogOptions);
    }

    private async Task ShowCreateWorkspaceDialog()
    {
        var parameters = new DialogParameters
        {
            { "OnWorkspaceCreated", EventCallback.Factory.Create<string>(this, async () => await WorkspaceGrid.ReloadServerData()) }
        };
        await DialogService.ShowAsync<CreateWorkspaceDialog>("Create Workspace", parameters, AppliationSettings.DialogOptions);
    }


    private async Task ImportToPack(WorkspaceDto workspaceDto)
    {
        var workspaceName = workspaceDto.Name;
        var folderPath = Path.Combine(ImagePathOptions.Value.ImagePath ?? "", workspaceName);
        if (!Directory.Exists(folderPath))
        {
            Snackbar.Add($"该工作区暂未包含工作项！", Severity.Error);
            return;
        }

        try
        {
            // 临时 zip 文件路径
            var tempZipPath = Path.Combine(Path.GetTempPath(), workspaceName + ".zip");

            if (File.Exists(tempZipPath))
                File.Delete(tempZipPath);

            // 打包文件夹
            ZipFile.CreateFromDirectory(folderPath, tempZipPath, CompressionLevel.Fastest, includeBaseDirectory: false);

            // 读取为字节流
            var zipBytes = await File.ReadAllBytesAsync(tempZipPath);

            // 下载
            await BlazorDownloadFileService.DownloadFile($"{workspaceName}.zip", zipBytes, "application/zip");

            // 删除临时文件
            File.Delete(tempZipPath);

            // Snackbar 成功提示
            Snackbar.Add($"工作区 {workspaceName} 已打包并下载！", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add($"打包失败：{ex.Message}", Severity.Error);
        }
    }


    private async Task ShowEditWorkspaceDialog(WorkspaceDto workspace)
    {
        var parameters = new DialogParameters
        {
            { "Workspace", workspace },
            { "OnWorkspaceUpdated", EventCallback.Factory.Create<string>(this, async () => await WorkspaceGrid.ReloadServerData()) }
        };
        await DialogService.ShowAsync<EditWorkspaceDialog>("Edit Workspace", parameters, AppliationSettings.DialogOptions);
    }

    private async Task ShowAddToWorkspaceDialog(UserDto user)
    {
        var parameters = new DialogParameters
        {
            { "UserId", user.Id },
            { "OnUserAdded", EventCallback.Factory.Create<string>(this, async () => await UserGrid.ReloadServerData()) }
        };
        await DialogService.ShowAsync<AddToWorkspaceDialog>("Add User to Workspace", parameters, AppliationSettings.DialogOptions);
    }
    private async Task ShowViewWorkspacesDialog(UserDto user)
    {
        var parameters = new DialogParameters
        {
            { "UserId", user.Id }
        };
        await DialogService.ShowAsync<ViewUserWorkspacesDialog>("View Workspaces", parameters, AppliationSettings.DialogOptions);
    }
    private async Task DeleteUser(string userId)
    {
        var result=await DialogService.ShowMessageBox("删除用户", "确定要删除此用户吗？", "是", "否");
        if (result.HasValue && !result.Value)
        {
            return; // 用户选择了否，取消删除
        };
        await UserService.DeleteUserAsync(userId);
        await UserGrid.ReloadServerData();
    }

    private async Task DeleteWorkspace(Guid workspaceId)
    {
        var result = await DialogService.ShowMessageBox("删除工作区", "确定要删除此工作区吗？", "是", "否");
        if (result.HasValue && !result.Value)
        {
            return; // 用户选择了否，取消删除
        }
        ;
        await WorkspaceService.DeleteWorkspaceAsync(workspaceId);
        await WorkspaceGrid.ReloadServerData();
    }
}