@page "/sharePage"
@using Microsoft.AspNetCore.Authorization
@using SyncArea.Misc
@using SyncArea.Services
@attribute [Authorize(Roles = "Admin")]
@inject IDialogService DialogService
@inject ShareService ShareService
@inject NavigationManager NavigationManager // 新增注入
<MudGrid>
    <MudItem xs="12">
        <MudCard Outlined="true">
            <MudCardHeader>
                <MudText Typo="Typo.h5">分享链接</MudText>
                <MudSpacer />
                <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="ShowCreateShareDialog">创建分享链接</MudButton>
            </MudCardHeader>
            <MudCardContent>
                <MudDataGrid @ref="ShareGrid" ServerData="LoadShares" T="ShareDto" MultiSelection="false" Style="max-height:60vh;overflow:auto" FixedFooter FixedHeader>
                    <Columns>
                  
                        <PropertyColumn Title="工作区" Property="x=>x.WorkspaceName"></PropertyColumn>
                        <TemplateColumn Title="链接">
                            <CellTemplate>
                                @{
                                    var url = $"{NavigationManager.BaseUri}share?shareid={context.Item.Url}";
                                }
                                <MudLink Href="@url" Target="_blank" Typo="Typo.body2" Underline="Underline.Hover">@url</MudLink>
                            </CellTemplate>
                        </TemplateColumn>
                        <PropertyColumn Title="过期日期" Property="x=>x.ExpiryDate" Format="yyyy-MM-dd"></PropertyColumn>
                        <PropertyColumn Title="状态" Property="x=>x.IsActive"></PropertyColumn>
                        <TemplateColumn Title="操作">
                            <CellTemplate>
                                @{
                                    var url = $"{NavigationManager.BaseUri}share?shareid={context.Item.Url}";
                                }
                                <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="() => ShowEditShareDialog(context.Item)" Disabled="@(!context.Item.IsActive)">修改</MudButton>
                                <MudButton Variant="Variant.Text" Color="Color.Secondary" OnClick="() => ShowQRCodePage(url)">二维码</MudButton>
                                <MudButton Variant="Variant.Text" Color="Color.Error" OnClick="() => RevokeShare(context.Item.Id)" Disabled="@(!context.Item.IsActive)">收回</MudButton>
                                <MudButton Variant="Variant.Text" Color="Color.Error" OnClick="() => DeleteShare(context.Item.Id)">删除</MudButton>
                            </CellTemplate>
                        </TemplateColumn>
                    </Columns>
                    <PagerContent>
                        <MudDataGridPager PageSizeOptions="[100,500,1000,2000,10000]" />
                    </PagerContent>
                </MudDataGrid>
            </MudCardContent>
        </MudCard>
    </MudItem>
</MudGrid>

@code {
    private MudDataGrid<ShareDto> ShareGrid = null!;

    private async Task<GridData<ShareDto>> LoadShares(GridState<ShareDto> state)
    {
        var shares = await ShareService.GetSharesAsync(state.Page + 1, state.PageSize);
        return new GridData<ShareDto>
            {
                Items = shares,
                TotalItems = (await ShareService.GetSharesAsync()).Count
            };
    }

    private async Task ShowCreateShareDialog()
    {
        var parameters = new DialogParameters
        {
            { "OnShareCreated", EventCallback.Factory.Create<string>(this, async () => await ShareGrid.ReloadServerData()) }
        };
        await DialogService.ShowAsync<CreateShareDialog>("创建分享链接", parameters, AppliationSettings.DialogOptions);
    }
    private async Task ShowQRCodePage(string share)
    {
        var parameters = new DialogParameters
        {
            { "Share", share },
        };
        await DialogService.ShowAsync<QRCodePage>("查看二维码", parameters, AppliationSettings.DialogOptions);
    }
    private async Task ShowEditShareDialog(ShareDto share)
    {
        var parameters = new DialogParameters
        {
            { "Share", share },
            { "OnShareUpdated", EventCallback.Factory.Create<string>(this, async () => await ShareGrid.ReloadServerData()) }
        };
        await DialogService.ShowAsync<EditShareDialog>("修改分享链接", parameters, AppliationSettings.DialogOptions);
    }

    private async Task RevokeShare(Guid shareId)
    {
        await ShareService.RevokeShareAsync(shareId);
        await ShareGrid.ReloadServerData();
    }

    private async Task DeleteShare(Guid shareId)
    {
        await ShareService.DeleteShareAsync(shareId);
        await ShareGrid.ReloadServerData();
    }
}