@inject UserCRUDService UserCRUDService
@inject ISnackbar SnackBar
@inject NavigationManager NavigationManager
<FlexPaperContainer>
    <EditForm Model="@changePasswordModel" OnValidSubmit="ChangePassword">
        <DataAnnotationsValidator/>
        <MudGrid >
            <MudItem xs="12" md="7" >
                <MudCard Outlined  Style="">
                    <MudCardHeader>
                        <MudText Typo="Typo.h6" Color="Color.Info"> 修改密码</MudText>
                    </MudCardHeader>
                    <MudCardContent>
                        <MudTextField @bind-Value=changePasswordModel.OldPassword Variant="Variant.Outlined" For="()=>changePasswordModel.OldPassword" Placeholder="旧密码" HelperText="请输入旧密码"></MudTextField>
                        <MudTextField @bind-Value=changePasswordModel.NewPassword Variant="Variant.Outlined" For="()=>changePasswordModel.NewPassword" Placeholder="新密码" HelperText="请输入新密码"></MudTextField>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton Color="Color.Primary" Class="ml-auto" Variant="Variant.Outlined" ButtonType="ButtonType.Submit"  >确认</MudButton>
                    </MudCardActions>
                </MudCard>
            </MudItem>
            <MudItem xs="12" md="5" >
                <MudPaper  Outlined Class="pa-4"  Height="100%">
                    <MudText>验证摘要</MudText>
                    <ValidationSummary></ValidationSummary>
                </MudPaper>
            </MudItem>

        </MudGrid>
    </EditForm>
</FlexPaperContainer>


@code{
    private ChangePasswordModel changePasswordModel = new ChangePasswordModel();
    [CascadingParameter] private IMudDialogInstance DialogInstance { get; set; } = default!;
    private class ChangePasswordModel
    {
        [Required]
        [Length(6,24)]
        public string? OldPassword{ get; set; }
        [Required]
        [Length(6, 24)]
        public string? NewPassword{ get; set; }
    } 

    private async Task ChangePassword()
    {
        var result= await UserCRUDService.ChangePassword(changePasswordModel.OldPassword??string.Empty, changePasswordModel.NewPassword??string.Empty);
        if(result)
        {
            SnackBar.Add("密码修改成功", Severity.Success);
            NavigationManager.NavigateTo("/account/logout", true);
        }
        else
        {
            SnackBar.Add("密码修改失败，请检查旧密码是否正确", Severity.Error);
        }
    }
}