@using MudBlazor
@using SyncArea.Pages.Account
@using SyncArea.Services
@using SyncArea.Identity.Models
@using System.Text.Json
@using static SyncArea.Services.WorkItemService
@inject WorkItemService WorkItemService
@inject UserManager<ApplicationUser> UserManager
@inject ISnackbar Snackbar
@inject UserCRUDService UserCRUDService
@inject IJSRuntime JSRuntime

<MudDialog Class="relative">
    <TitleContent>
        <MudText Typo="Typo.h6">添加工作项</MudText>
    </TitleContent>
    <DialogContent>
        <EditForm Model="@Model" OnValidSubmit="HandleCreateWorkItem">
            <DataAnnotationsValidator />
            <MudTextField Variant="Variant.Outlined" Label="备注（可选）" @bind-Value="Model.Remark" />
            <MudTextField Variant="Variant.Outlined" Format="yyyy-MM-dd" Label="日期" InputType="InputType.Date" @bind-Value="Model.Date" Required="true" />
            <input type="file" multiple accept="image/*"  id="fileInput" style="margin-top: 8px;" />
            <MudText Typo="Typo.body2" Class="mt-2" Id="imageCount">已选择 0 张图片</MudText>
            <div id="imagePreviewContainer" class="mt-2" style="display: flex; flex-wrap: wrap; gap: 8px;"></div>
            @if (!string.IsNullOrEmpty(ErrorMessage))
            {
                <MudAlert Severity="Severity.Error" Class="mt-2">@ErrorMessage</MudAlert>
            }
        </EditForm>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Outlined" OnClick="Cancel">取消</MudButton>
        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Outlined" Color="Color.Primary" OnClick="HandleCreateWorkItem">创建</MudButton>
        <MudOverlay Visible=isSending Absolute DarkBackground>                                                                                                          
            <MudProgressCircular Color="Color.Secondary" Indeterminate="true" />
        </MudOverlay>
    </DialogActions>
</MudDialog><a href="#"></a>

<style>
    .gallery-card {
    transition: transform 0.2s;
    position: relative;
    width: 100px;
    height: 100px;
    }

    .delete-button {
    position: absolute;
    top: -8px;
    right: -8px;
    background: red;
    color: white;
    border-radius: 50%;
    width: 24px;
    height: 24px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    }
</style>

@code {
    [CascadingParameter] public IMudDialogInstance MudDialog { get; set; } = null!;
    [Parameter] public Guid WorkspaceId { get; set; }
    [Parameter] public EventCallback<WorkItemDto> OnWorkItemCreated { get; set; }
    private bool isSending;
    private CreateWorkItemModel Model { get; set; } = new();
    private string ErrorMessage { get; set; } = string.Empty;

    public class CreateWorkItemModel
    {
        public string? Remark { get; set; }
        public DateTime Date { get; set; } = DateTime.Now; // 默认值为当前时间
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("initializeFileInput", "fileInput", "imagePreviewContainer", "imageCount");
        }
    }

    private async Task HandleCreateWorkItem()
    {
        isSending = true;
        await InvokeAsync(StateHasChanged);

        // 验证输入
        if (!ValidateInput(out string errorMessage))
        {
            await DisplayError(errorMessage);
            return;
        }

        try
        {
            var formData = new
            {
                UserId = UserCRUDService.CurrentUser!.Id,
                WorkspaceId = WorkspaceId.ToString(),
                Remark = Model.Remark ?? string.Empty,
                Date = Model.Date.ToString("o") // 
            };

            var result = await JSRuntime.InvokeAsync<UploadResult>("uploadWorkItem", "/api/workitems", formData);

            if (result.Success && result.Data != null)
            {
                Snackbar.Add("工作项创建成功", Severity.Success);
                await OnWorkItemCreated.InvokeAsync(result.Data);
                MudDialog.Close(DialogResult.Ok(true));
            }
            else
            {
                errorMessage = ParseError(result.Error);
                await DisplayError(errorMessage);
            }
        }
        catch (Exception ex)
        {
            await DisplayError($"创建工作项失败: {ex.Message} {ex.Source}");
        }
        finally
        {
            isSending = false;
        }
    }

    // 验证输入
    private bool ValidateInput(out string errorMessage)
    {
        errorMessage = string.Empty;

        if (UserCRUDService.CurrentUser == null || string.IsNullOrEmpty(UserCRUDService.CurrentUser.Id))
        {
            errorMessage = "用户未登录或 UserId 无效";
            return false;
        }

        if (WorkspaceId == Guid.Empty)
        {
            errorMessage = "工作区 ID 无效";
            return false;
        }

        if (Model.Date == default)
        {
            errorMessage = "日期不能为空";
            return false;
        }

        return true;
    }

    // 解析错误信息
    private string ParseError(string error)
    {
        try
        {
            var errorResponse = System.Text.Json.JsonSerializer.Deserialize<ValidationErrorResponse>(error);
            return errorResponse?.Errors != null
                ? $"创建工作项失败: {string.Join("; ", errorResponse.Errors.Select(e => $"{e.Key}: {string.Join(", ", e.Value)}"))}"
                : $"创建工作项失败: {error}";
        }
        catch
        {
            return $"创建工作项失败: {error}";
        }
    }

    // 显示错误信息
    private async Task DisplayError(string message)
    {
        ErrorMessage = message;
        Snackbar.Add(ErrorMessage, Severity.Error);
        await InvokeAsync(StateHasChanged);
    }
    private async Task Cancel()
    {
        await JSRuntime.InvokeVoidAsync("clearFiles");
        MudDialog.Cancel();
    }

    private class UploadResult
    {
        public bool Success { get; set; }
        public WorkItemDto? Data { get; set; } 
        public string Error { get; set; } = string.Empty;
    }

    private class ValidationErrorResponse
    {
        public string? Type { get; set; }
        public string? Title { get; set; }
        public int Status { get; set; }
        public Dictionary<string, string[]> Errors { get; set; } = new Dictionary<string, string[]>();
        public string? TraceId { get; set; }
    }
}