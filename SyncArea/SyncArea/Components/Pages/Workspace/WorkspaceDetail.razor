@page "/workspace/{WorkspaceId:guid}"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using SyncArea.Identity.Models
@using SyncArea.Misc
@using SyncArea.Services
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory
@using static SyncArea.Services.WorkItemService
@attribute [Authorize(Policy = "WorkspaceMember")]
@inject WorkItemService WorkItemService
@inject WorkspaceService WorkspaceService
@inject IDialogService DialogService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar
@inject ImageBuildService ImageBuildService
@inject UserCRUDService UserCRUDService

<MudCard Elevation="0">
    <MudCardHeader Class="d-flex flex-column">
        <MudText Typo="Typo.h5" Color="Color.Primary" Align="Align.Left">工作区名称: @WorkspaceDto?.Name</MudText>
        <br />
        <MudSpacer />
        <div class="d-flex ml-auto">
            <MudButton Variant="Variant.Outlined" Color="Color.Error" Href="/">首页</MudButton>
            <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="ShowCreateWorkItemDialog" Class="mr-1">添加</MudButton>
        </div>
    </MudCardHeader>
    <MudCardContent>
            @if (IsLoading)
        {
            <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
        }
        else if (GroupedWorkItems.Any())
        {
            <DisplayWorkItem  DeleteWorkItemCallback=DeleteWorkItem GroupedWorkItems="GroupedWorkItems"></DisplayWorkItem>
        }
        else
        {
            <MudText>暂无工作项</MudText>
        }
    </MudCardContent>
</MudCard>


@code {
    [Parameter] public Guid WorkspaceId { get; set; }
    private WorkspaceDto? WorkspaceDto { get; set; }
    private List<WorkItemDto> WorkItems { get; set; } = new();
    private IEnumerable<IGrouping<DateTime, WorkItemDto>> GroupedWorkItems => WorkItems.GroupBy(wi => wi.Date.Date).OrderBy(x=>x.Key);
    private bool IsLoading { get; set; } = true;


    private Workspace? workspace;
    protected override async Task OnInitializedAsync()
    {
        WorkspaceDto = (await WorkspaceService.GetWorkspacesAsync()).FirstOrDefault(w => w.Id == WorkspaceId);
        if (WorkspaceDto == null)
        {
            Navigation.NavigateTo("/workspaces");
            return;
        }
        WorkItems = await WorkItemService.GetWorkItemsByWorkspaceAsync(WorkspaceId);

        if (workspace == null)
        {
            await using var db = await DbContextFactory.CreateDbContextAsync();
            workspace = await db.Workspaces.FirstOrDefaultAsync(w => w.Id == WorkspaceId);
        }
        IsLoading = false;
    }
    private async Task DeleteWorkItem(WorkItemDto workItemDto)
    {
        var item = WorkItems.FirstOrDefault(wi => wi.Id == workItemDto.Id);
        if(item!=null)
        {
            WorkItems.Remove(item);
            await InvokeAsync(StateHasChanged);   
        }
    }


    private async Task ShowCreateWorkItemDialog()
    {
        var parameters = new DialogParameters
        {
            { "WorkspaceId", WorkspaceId },
            { "OnWorkItemCreated", EventCallback.Factory.Create<WorkItemDto>(this, async (WorkItemDto newWorkItem) =>
            {

                if(workspace == null)
                {
                    Snackbar.Add("工作区不存在", Severity.Error);
                    return;
                }
                var imageUrlBase=  ImageBuildService.BuildWebImagePath(workspace);
                newWorkItem.PhotoUrls= newWorkItem.PhotoUrls.Select(p => imageUrlBase + "/" + p).ToList();
                newWorkItem.Name=UserCRUDService?.CurrentUser?.Name??"暂未设置";
                WorkItems.Add(newWorkItem); // 直接添加新工作项
               await InvokeAsync(StateHasChanged);
                await JSRuntime.InvokeVoidAsync("initLazyLoad"); // 每次参数更新重新触发

            })}
        };
        await DialogService.ShowAsync<CreateWorkItemDialog>("添加工作项", parameters, AppliationSettings.DialogOptions);
    }
}