@using Microsoft.AspNetCore.Components.Web.Virtualization
@using MudBlazor
@using SyncArea.Components.Pages.Admin
@using SyncArea.Services
@using static SyncArea.Services.WorkItemService
@inject IDialogService DialogService
@inject UserCRUDService UserCRUDService
@inject IJSRuntime JSRuntime
@inject ISnackbar Snackbar
@inject WorkItemService WorkItemService
<div id="container"  style="max-height:80vh;overflow:scroll">
    <MudXOutline ScrollContainerSelector="#container"  StyleVariant="OutlineStyleVariant.Bullet" >
        @if (GroupedWorkItems != null)
        {
            foreach (var group in GroupedWorkItems)
            {
                var date = group.Key.Date.ToString("yyyy-MM-dd");
                <MudXOutlineSection Title="@date" >
                    <MudExpansionPanels Outlined Gutters="false">
                        <MudExpansionPanel Text="@date" HeaderClass="pa-2" Gutters="false">
                            <MudPaper Outlined Class="pa-2">
                                @foreach (var item in group)
                                {
                                    <div @key="item" class="pa-2">
                                        <MudText>创建者: @item.Name</MudText>
                                        <MudText>备注: @(item.Remark ?? "无")</MudText>
                                        <MudText>图片数: @item.PhotoUrls.Count</MudText>
                                        @if (item.PhotoUrls.Any())
                                        {
                                            <MudGrid Class="mt-2">
                                                @foreach (var photoUrl in item.PhotoUrls)
                                                {
                                                    <MudItem xs="6" sm="4" md="3" @key="photoUrl">
                                                        <MudButton OnClick="@(() => LookImage(photoUrl))">
                                                            <MudImage Src="./loading.svg"
                                                            data-src="@photoUrl"
                                                            Alt="照片"
                                                            Fluid
                                                            ObjectFit="ObjectFit.Cover"
                                                            ObjectPosition="ObjectPosition.Center"
                                                            Style="aspect-ratio:1"
                                                            Class="lazy-image" />
                                                        </MudButton>
                                                    </MudItem>
                                                }
                                            </MudGrid>
                                        }
                                        else
                                        {
                                            <MudText Color="Color.Info">无照片</MudText>
                                        }
                                        <br />
                                        @if (UserCRUDService.CanManageUsers)
                                        {
                                            <div class="d-flex">
                                                <MudButton Class="ml-auto" Variant="Variant.Filled" Color="Color.Error" OnClick="@(()=>DeleteWorkItem(item))">删除该项</MudButton>
                                            </div>
                                        }
                                        <br />
                                        <MudDivider />
                                    </div>
                                }

                            </MudPaper>
                        </MudExpansionPanel>
                    </MudExpansionPanels>
                    <br />
                </MudXOutlineSection>
            }
        }
    </MudXOutline>
</div>

@code {
    [Parameter]
    public IEnumerable<IGrouping<DateTime, WorkItemDto>>? GroupedWorkItems { get; set; }
    [Parameter]
    public EventCallback<WorkItemDto> DeleteWorkItemCallback{ get; set; }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("initLazyLoad");
        }
    }
    private async Task DeleteWorkItem(WorkItemDto workItemDto)
    {
        var result =await DialogService.ShowMessageBox("删除工作项", "确定要删除此工作项吗？", yesText: "删除", noText: "取消");
        if(result.Value)
        {
            try
            {
                var sucess= await WorkItemService.DeleteWorkItem(workItemDto);
                if(sucess)
                {
                    await DeleteWorkItemCallback.InvokeAsync(workItemDto);
                    Snackbar.Add("工作项已删除", Severity.Success);
                }
                else
                {
                    Snackbar.Add("工作项删除失败", Severity.Error);
                }

            }
            catch (Exception ex)
            {
            }
        }
    }

    private async Task LookImage(string url)
    {
        var options = new DialogOptions
            {
                CloseButton = false,
                MaxWidth = MaxWidth.ExtraLarge,
                NoHeader = true,
                 CloseOnEscapeKey=true
            };
        var parameters = new DialogParameters<LookImage>
        {
            { x=>x.InitialUrl, url },
            {x=>x.GroupedWorkItems, GroupedWorkItems}
        };
        await DialogService.ShowAsync<LookImage>("查看图片", parameters, options);
    }
}