@using MudBlazor
@using SyncArea.Services
@using SyncArea.Identity.Models
@inject WorkItemService WorkItemService
@inject UserManager<ApplicationUser> UserManager
@inject ISnackbar Snackbar
@inject UserCRUDService UserCRUDService
@inherits MudComponentBase

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">添加工作项</MudText>
    </TitleContent>
    <DialogContent>
        <EditForm Model="@Model" OnValidSubmit="HandleCreateWorkItem">
            <DataAnnotationsValidator />
            <MudTextField Variant="Variant.Outlined" Label="备注（可选）" @bind-Value="Model.Remark" />
            <MudTextField Variant="Variant.Outlined" Format="yyyy-MM-dd" Label="日期" InputType="InputType.Date" @bind-Value="Model.Date" />
            <MudFileUpload T="IReadOnlyList<IBrowserFile>" FilesChanged="OnFilesChanged" MaximumFileCount="10" Accept=".jpg,.jpeg,.png">
                <ActivatorContent>
                    <MudButton Variant="Variant.Outlined" Color="Color.Primary" StartIcon="@Icons.Material.Outlined.Upload" Disabled="@(Images.Count >= 10)">上传图片</MudButton>
                </ActivatorContent>
            </MudFileUpload>
            @if (ImagePreviews.Any())
            {
                <MudText Typo="Typo.body2" Class="mt-2">已选择 @ImagePreviews.Count 张图片</MudText>
                <MudGrid Class="mt-2">
                    @foreach (var preview in ImagePreviews.Select((value, index) => new { Value = value, Index = index }))
                    {
                        <MudItem @key="preview" xs="6" sm="4" md="3" lg="2">
                            <MudCard Class="gallery-card">
                                <MudBadge Icon="@Icons.Material.Filled.Close" Color="Color.Error" Overlap="true" Origin="Origin.TopRight" OnClick="() => RemoveImage(preview.Index)">
                                    <MudImage Src="@preview.Value" Alt="预览图片" Width="100" Height="100" ObjectFit="ObjectFit.Cover" />
                                </MudBadge>
                            </MudCard>
                        </MudItem>
                    }
                </MudGrid>
            }
            @if (!string.IsNullOrEmpty(ErrorMessage))
            {
                <MudAlert Severity="Severity.Error" Class="mt-2">@ErrorMessage</MudAlert>
            }
        </EditForm>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Outlined" OnClick="Cancel">取消</MudButton>
        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Outlined" Color="Color.Primary" OnClick="HandleCreateWorkItem">创建</MudButton>
    </DialogActions>
</MudDialog>

<style>
    .gallery-card {
        transition: transform 0.2s;
    }

        .gallery-card:hover {
            transform: scale(1.05);
        }
</style>

@code {
    [CascadingParameter] public IMudDialogInstance MudDialog { get; set; } = null!;
    [Parameter] public Guid WorkspaceId { get; set; }
    [Parameter] public EventCallback OnWorkItemCreated { get; set; }

    private CreateWorkItemModel Model { get; set; } = new();
    private string ErrorMessage { get; set; } = string.Empty;
    private List<byte[]> Images { get; set; } = new();
    private List<string> ImagePreviews { get; set; } = new(); // 用于客户端预览的 Base64

    public class CreateWorkItemModel
    {
        public string? Remark { get; set; }
        public DateTime Date { get; set; } = DateTime.Now;
    }

    private async Task OnFilesChanged(IReadOnlyList<IBrowserFile> files)
    {
        foreach (var file in files)
        {
            if (file.Size > 10 * 1024 * 1024) // 10MB 限制
            {
                Snackbar.Add($"图片 {file.Name} 超过 10MB", Severity.Error);
                continue;
            }
            using var stream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024);
            using var memoryStream = new MemoryStream();
            await stream.CopyToAsync(memoryStream);
            var imageData = memoryStream.ToArray();
            Images.Add(imageData);
            // 生成 Base64 仅用于预览
            ImagePreviews.Add($"data:image/{file.ContentType.Split('/')[1]};base64,{Convert.ToBase64String(imageData)}");
        }
        if (Images.Count > 10)
        {
            Images = Images.Take(10).ToList();
            ImagePreviews = ImagePreviews.Take(10).ToList();
            Snackbar.Add("最多上传 10 张图片", Severity.Warning);
        }
        StateHasChanged();
    }

    private void RemoveImage(int index)
    {
        if (index >= 0 && index < Images.Count)
        {
            Images.RemoveAt(index);
            ImagePreviews.RemoveAt(index);
            Snackbar.Add("图片已移除", Severity.Info);
            StateHasChanged();
        }
    }

    private async Task HandleCreateWorkItem()
    {
        var user = UserCRUDService.CurrentUser;
        if (user == null)
        {
            ErrorMessage = "用户未登录";
            Snackbar.Add("用户未登录", Severity.Error);
            return;
        }

        var success = await WorkItemService.CreateWorkItemAsync(user.Id, WorkspaceId, Model.Remark, Model.Date, Images.Any() ? Images : null);
        if (success)
        {
            Snackbar.Add("工作项创建成功", Severity.Success);
            await OnWorkItemCreated.InvokeAsync();
            MudDialog.Close(DialogResult.Ok(true));
        }
        else
        {
            ErrorMessage = "创建工作项失败";
            Snackbar.Add("创建工作项失败", Severity.Error);
        }
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }
}